---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# Crowd_Insight 프로젝트 코딩 규칙
 
## 기본 기술 스택
- React를 UI 구성을 위한 핵심 라이브러리로 사용
- Jotai를 상태 관리 라이브러리로 사용
- styled-components를 스타일링 솔루션으로 사용
 
## 아토믹 디자인 패턴 구조
- atoms: 버튼, 입력 필드, 아이콘 등 기본 UI 요소
- molecules: atoms를 조합한 복합 컴포넌트(폼 그룹, 카드 등)
- organisms: molecules을 조합하여 특정 기능 구현(헤더, 대시보드 패널 등)
- 각 컴포넌트 레벨을 적절한 폴더에 분리하여 관리
 
## Sequential Thinking 패턴
 
### 1. 컴포넌트 설계 단계
React의 공식 문서 "Thinking in React"에 기반한 단계적 접근법:
 
1. **UI를 컴포넌트 계층 구조로 분해**
   - 단일 책임 원칙에 따라 각 컴포넌트가 하나의 기능에 집중하도록 설계
   - 컴포넌트 간 결합도를 최소화하고 응집도를 높이는 방향으로 설계
 
2. **정적 버전 구축**
   - 상태(state) 없이 props만으로 UI를 구성하는 정적 버전 먼저 구현
   - 하향식(top-down) 또는 상향식(bottom-up) 접근법 사용 가능
 
3. **상태 식별 및 위치 결정**
   - 최소한의 상태 집합 식별
   - 상태를 필요로 하는 모든 컴포넌트 식별
   - 공통 소유자 컴포넌트 또는 상위 컴포넌트에 상태 배치
   - Jotai atom 사용 시 전역 상태 필요성 판단
 
4. **역방향 데이터 흐름 추가**
   - 하위 컴포넌트에서 상위 컴포넌트 상태 변경을 위한 콜백 함수 구현
   - 이벤트 핸들러를 통한 상태 업데이트 로직 구성
 
### 2. 컴포넌트 구현 순서
```javascript
// 1단계: 컴포넌트 정의 및 필요한 라이브러리 임포트
import React from 'react';
import { useAtom } from 'jotai';
import styled from 'styled-components';
 
// 2단계: Props 및 타입 정의
const UserProfile = ({ userId, showDetails = false }) => {
  // 3단계: 상태 및 필요한 훅 초기화
  const [userData, setUserData] = useAtom(userDataAtom);
  const [isLoading, setIsLoading] = useState(false);
  // 4단계: 사이드 이펙트 정의
  useEffect(() => {
    // 사이드 이펙트 코드
    fetchUserData(userId);
  }, [userId]);
  // 5단계: 이벤트 핸들러 및 헬퍼 함수 정의
  const handleProfileUpdate = useCallback((data) => {
    // 업데이트 로직
  }, []);
  // 6단계: 조건부 렌더링 로직
  if (isLoading) return <LoadingSpinner />;
  if (!userData) return <EmptyState />;
  // 7단계: 실제 UI 렌더링
  return (
<StyledUserProfile>
      {/* 컴포넌트 UI */}
</StyledUserProfile>
  );
};
 
// 8단계: 스타일 컴포넌트 정의
const StyledUserProfile = styled.div`
  /* 스타일 정의 */
`;
 
// 9단계: 컴포넌트 내보내기
export default UserProfile;
```
 
### 3. Jotai 상태 관리 패턴
```javascript
// 1단계: 기본 원시 상태 정의
export const userIdAtom = atom('');
 
// 2단계: 파생 상태 정의
export const userDataAtom = atom(
  (get) => {
    const userId = get(userIdAtom);
    return userId ? getUserData(userId) : null;
  }
);
 
// 3단계: 액션 정의
export const updateUserProfileAtom = atom(
  null,
  (get, set, newProfile) => {
    const userId = get(userIdAtom);
    set(userDataAtom, (prev) => ({...prev, ...newProfile}));
    saveUserProfile(userId, newProfile);
  }
);
```
 
### 4. 비동기 작업 처리 패턴
```javascript
const fetchData = async () => {
  // 1단계: 초기 상태 설정
  setLoading(true);
  setError(null);
  try {
    // 2단계: 데이터 요청
    const response = await api.get('/data');
    // 3단계: 데이터 검증
    if (!response || !response.data) {
      throw new Error('Invalid response');
    }
    // 4단계: 데이터 가공
    const processedData = processData(response.data);
    // 5단계: 상태 업데이트
    setData(processedData);
    setSuccess(true);
  } catch (error) {
    // 오류 처리 단계
    setError(error.message);
    setSuccess(false);
  } finally {
    // 정리 단계
    setLoading(false);
  }
};
```
 
### 5. 스타일드 컴포넌트 패턴
```javascript
// 1단계: 테마 및 기본 스타일 변수 정의
const theme = {
  colors: {
    primary: '#007bff',
    secondary: '#6c757d',
  },
  spacing: {
    small: '8px',
    medium: '16px',
  }
};
 
// 2단계: 기본 스타일 컴포넌트 정의
const StyledButton = styled.button`
  background-color: ${props => props.theme.colors.primary};
  padding: ${props => props.theme.spacing.medium};
`;
 
// 3단계: 변형 스타일 컴포넌트 정의
const OutlinedButton = styled(StyledButton)`
  background-color: transparent;
  border: 1px solid ${props => props.theme.colors.primary};
`;
```
 
## 파일 및 폴더 구조
- 컴포넌트 파일명은 PascalCase로 작성 (예: UserProfile.jsx)
- 유틸리티, 훅, 상태 관련 파일은 camelCase 사용
- atoms 폴더에 Jotai 상태 관리 코드 배치
 
## 테스트 가이드라인
- 각 순차적 단계별 단위 테스트 작성
- 전체 흐름에 대한 통합 테스트 추가
- 테스트 케이스는 기능이 아닌 동작 중심으로 작성
