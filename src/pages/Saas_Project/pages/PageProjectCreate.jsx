import React, { useEffect, useState, useRef } from "react";
import styled from "styled-components";
import { useAtom } from "jotai";
import { palette } from "../../../assets/styles/Palette";
import AtomPersonaLoader from "../../Global/atoms/AtomPersonaLoader";
import MoleculeHeader from "../../Global/molecules/MoleculeHeader";
import { Button, IconButton } from "../../../assets/styles/ButtonStyle";
import {
  FormBox,
  CustomTextarea,
  CustomInput,
  SelectBox,
  SelectBoxItem,
  SelectBoxItem2,
  SelectBoxTitle,
  SelectBoxList,
} from "../../../assets/styles/InputStyle";
import PopupWrap from "../../../assets/styles/Popup";
import {
  ContentsWrap,
  MainContent,
  TabWrapType5,
  TabButtonType5,
  TabContent5,
  TabContent5Item,
  StyledDropzone,
  DropzoneStyles,
  ListBoxGroup,
  Title,
} from "../../../assets/styles/BusinessAnalysisStyle";
import {
  IS_LOGGED_IN,
  PROJECT_ID,
  PROJECT_CREATE_INFO,
  PROJECT_TOTAL_INFO,
  PROJECT_EDUCATION_STATE,
  PROJECT_EDUCATION_CODE,
} from "../../AtomStates";
import images from "../../../assets/styles/Images";
import { H2, Sub3, Body1, Body2 } from "../../../assets/styles/Typography";
import "react-dropzone-uploader/dist/styles.css";
import Dropzone from "react-dropzone-uploader";

import { useDynamicViewport } from "../../../assets/DynamicViewport";
import { useNavigate } from "react-router-dom";
import {
  createProjectOnServerSaas,
  InterviewXProjectAnalysisMultimodalRequest,
  InterviewXProjectAnalysisRequest,
} from "../../../utils/indexedDB";

const PageProjectCreate = () => {
  const navigate = useNavigate();

  const [projectTotalInfo, setProjectTotalInfo] = useAtom(PROJECT_TOTAL_INFO);
  const [isLoggedIn] = useAtom(IS_LOGGED_IN);
  const [, setprojectId] = useAtom(PROJECT_ID);
  const [projectCreateInfo, setProjectCreateInfo] =
    useAtom(PROJECT_CREATE_INFO);
  const [projectEducationState, setProjectEducationState] = useAtom(
    PROJECT_EDUCATION_STATE
  );
  // console.log(
  //   "üöÄ ~ PageProjectCreate ~ projectEducationState:",
  //   projectEducationState
  // );
  const [projectEducationCode, setProjectEducationCode] = useAtom(
    PROJECT_EDUCATION_CODE
  );
  const [activeTab, setActiveTab] = useState(1);
  const [completedSteps, setCompletedSteps] = useState([]);
  const [showPopupError, setShowPopupError] = useState(false);
  const [showPopupError2, setShowPopupError2] = useState(false);
  const [isLoading] = useState(false);
  const [isSelectBoxOpen, setIsSelectBoxOpen] = useState(false);
  const [dropUp, setDropUp] = useState(false);
  const [showPopupSave, setShowPopupSave] = useState(false);
  const [descriptionLength, setDescriptionLength] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [fileNames, setFileNames] = useState([]);
  const [, setShowPopupFileSize] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editingText, setEditingText] = useState("");
  const [isEditingTarget, setIsEditingTarget] = useState(false);
  const [editingTargetText, setEditingTargetText] = useState("");
  const targetTextareaRef = useRef(null);
  const [isSkipped, setIsSkipped] = useState(false);

  // Í∞Å ÏÖÄÎ†âÌä∏Î∞ïÏä§Ïùò Ïó¥Î¶º/Îã´Ìûò ÏÉÅÌÉúÎ•º Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨
  const [selectBoxStates, setSelectBoxStates] = useState({
    business: false,
    industry: false,
    country: false,
  });

  // Í∞Å ÏÖÄÎ†âÌä∏Î∞ïÏä§Ïùò Î∞©Ìñ• ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [dropUpStates, setDropUpStates] = useState({
    business: false,
    industry: false,
    country: false,
  });

  // Í∞Å ÏÖÄÎ†âÌä∏Î∞ïÏä§ ref ÏÉùÏÑ±
  const businessRef = useRef(null);
  const industryRef = useRef(null);
  const countryRef = useRef(null);

  // Í∞Å ÏÖÄÎ†âÌä∏Î∞ïÏä§Ïùò ÏÑ†ÌÉùÎêú Í∞íÏùÑ Í¥ÄÎ¶¨ÌïòÎäî state Ï∂îÍ∞Ä
  const [selectedValues, setSelectedValues] = useState({
    business: "",
    industry: "",
    country: "",
  });

  // Í∞Å ÌïÑÎìúÏùò Í∞íÏùÑ Í¥ÄÎ¶¨ÌïòÎäî state Ï∂îÍ∞Ä
  const [projectName, setProjectName] = useState("");
  const [projectDescription, setProjectDescription] = useState("");
  const [business, setBusiness] = useState("");
  const [industry, setIndustry] = useState("");
  const [country, setCountry] = useState("");

  // isLoadingScenarioÎ•º stateÎ°ú Î≥ÄÍ≤Ω
  const [isLoadingScenario, setIsLoadingScenario] = useState(false);

  // textarea ref Ï∂îÍ∞Ä
  const textareaRef = useRef(null);

  // textarea ÎÜíÏù¥ ÏûêÎèô Ï°∞Ï†à Ìï®Ïàò
  const adjustTextareaHeight = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height =
        textareaRef.current.scrollHeight + "px";
    }
  };

  // textarea ÎÇ¥Ïö©Ïù¥ Î≥ÄÍ≤ΩÎê† ÎïåÏôÄ editing Î™®ÎìúÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÎÜíÏù¥ Ï°∞Ï†à
  useEffect(() => {
    if (isEditing) {
      // setTimeoutÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ DOM ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÎÜíÏù¥ Ï°∞Ï†à
      setTimeout(() => {
        adjustTextareaHeight();
      }, 0);
    }
  }, [editingText, isEditing]);

  // handleInputChange Ìï®Ïàò ÏàòÏ†ï
  const handleInputChange = (field, value) => {
    // formData ÎåÄÏã† Í∞úÎ≥Ñ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    if (field === "projectName") {
      setProjectName(value);
    } else if (field === "projectDescription") {
      setProjectDescription(value);
    } else if (field === "business") {
      setBusiness(value);
    } else if (field === "industry") {
      setIndustry(value);
    } else if (field === "country") {
      setCountry(value);
    }
  };

  // ÏÖÄÎ†âÌä∏Î∞ïÏä§ ÌÜ†Í∏Ä Ìï®Ïàò ÏàòÏ†ï
  const toggleSelectBox = (boxName, event) => {
    if (completedSteps.includes(2)) return;
    const selectBox = event.currentTarget;
    const rect = selectBox.getBoundingClientRect();
    const spaceBelow = window.innerHeight - rect.bottom;
    const spaceNeeded = 250; // ÏÖÄÎ†âÌä∏Î∞ïÏä§ ÎìúÎ°≠Îã§Ïö¥Ïùò ÎåÄÎûµÏ†ÅÏù∏ ÎÜíÏù¥

    // ÏïÑÎûò Í≥µÍ∞ÑÏù¥ Î∂ÄÏ°±ÌïòÎ©¥ ÏúÑÎ°ú ÌëúÏãú
    setDropUpStates((prev) => ({
      ...prev,
      [boxName]: spaceBelow < spaceNeeded,
    }));

    setSelectBoxStates((prev) => ({
      ...prev,
      [boxName]: !prev[boxName],
    }));
  };
  const getRandomThumbnail = () => {
    const randomNum = Math.floor(Math.random() * 20) + 1;
    const thumbnailKey = `ProjectThumbnail${String(randomNum).padStart(
      2,
      "0"
    )}`;
    return thumbnailKey;
  };

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Í∞êÏßÄ Ìï∏Îì§Îü¨
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (businessRef.current && !businessRef.current.contains(event.target)) {
        setSelectBoxStates((prev) => ({ ...prev, business: false }));
      }
      if (industryRef.current && !industryRef.current.contains(event.target)) {
        setSelectBoxStates((prev) => ({ ...prev, industry: false }));
      }
      if (countryRef.current && !countryRef.current.contains(event.target)) {
        setSelectBoxStates((prev) => ({ ...prev, country: false }));
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSelectBoxClick = () => {
    setIsSelectBoxOpen(!isSelectBoxOpen);
    setDropUp(!dropUp);
  };

  // handleSubmitBusinessInfo Ìï®Ïàò ÏàòÏ†ï
  const handleSubmitBusinessInfo = async () => {
    if (activeTab === 1) {
      // setCompletedSteps((prev) => [...prev, 1]);
      setActiveTab(2);
    } else if (activeTab === 2) {
      setCompletedSteps((prev) => [...prev, 2]);
      setActiveTab(3);
      setIsLoadingScenario(true);

      // API Ï†ÑÏÜ° Î∞è Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ï≤òÎ¶¨s
      try {
        const timeStamp = new Date().getTime();

        const data = {
          project_name: projectName,
          product_description: projectDescription,
          business_model: business,
          industry_type: industry,
          target_country: country,
          tool_id: Date.now(),
          files: uploadedFiles,
        };

        let response = await InterviewXProjectAnalysisMultimodalRequest(
          data,
          isLoggedIn
        );
        let RetryCount = 0;
        const MaxRetries = 10;

        while (
          RetryCount < MaxRetries &&
          (!response ||
            !response.response ||
            !response.response.project_analysis_multimodal ||
            !response.response.project_analysis_multimodal.business_analysis ||
            !response.response.project_analysis_multimodal.file_analysis ||
            !response.response.project_analysis_multimodal.target_customer)
        ) {
          response = await InterviewXProjectAnalysisMultimodalRequest(
            data,
            isLoggedIn
          );
          RetryCount++;
        }

        if (RetryCount >= MaxRetries) {
          setShowPopupError(true);
          return;
        }

        // setFileNames(
        //   uploadedFiles.map((file, index) => ({
        //     id: "file_" + timeStamp + "_" + (index + 1),
        //     name: file.name,
        //   }))
        // );

        setProjectCreateInfo(response.response.project_analysis_multimodal);

        setEditingText({
          business_analysis:
            response.response.project_analysis_multimodal.business_analysis,
          file_analysis:
            response.response.project_analysis_multimodal.file_analysis,
        });
        setEditingTargetText(
          response.response.project_analysis_multimodal.target_customer
        );

        const projectTotalData = {
          projectTitle: projectName,
          projectDescription: projectDescription,
          businessModel: business,
          industryType: industry,
          targetCountry: country,
          projectAnalysis: response.response.project_analysis_multimodal,
          files: uploadedFiles.map((file, index) => ({
            id: "file_" + timeStamp + "_" + (index + 1),
            name: file.name,
          })),
          thumbnail: getRandomThumbnail(),
          projectEducationState: projectEducationState,
          projectEducationCode: projectEducationCode,
        };
        setProjectTotalInfo(projectTotalData);
      } catch (error) {
      } finally {
        setIsLoadingScenario(false);
      }
    }
  };

  // handlePurposeSelect Ìï®Ïàò ÏàòÏ†ï
  const handlePurposeSelect = (value, field) => {
    setSelectedValues((prev) => ({
      ...prev,
      [field]: value,
    }));
    handleInputChange(field, value);
    setSelectBoxStates((prev) => ({
      ...prev,
      [field]: false,
    }));
  };

  // isRequiredFieldsFilled Ìï®Ïàò ÏàòÏ†ï
  const isRequiredFieldsFilled = () => {
    if (activeTab === 1) {
      // ÌÉ≠ 1Ïùò Î™®Îì† ÌïÑÏàò ÌïÑÎìúÍ∞Ä Ï±ÑÏõåÏ†∏ ÏûàÎäîÏßÄ ÌôïÏù∏
      return (
        projectName.trim() !== "" &&
        projectDescription.trim() !== "" &&
        business !== "" &&
        industry !== "" &&
        country !== ""
      );
    }
    // ÌÉ≠ 2Ïùò Í≤ΩÏö∞ ÌååÏùº ÏóÖÎ°úÎìú Ïó¨Î∂Ä ÌôïÏù∏
    else if (activeTab === 2) {
      return fileNames.length > 0;
    }
    // Îã§Î•∏ ÌÉ≠Ïùò Í≤ΩÏö∞
    return true;
  };

  // ÌååÏùº ÏóÖÎ°úÎìú Ìï∏Îì§Îü¨
  const handleChangeStatus = ({ meta, file, remove }, status) => {
    const maxSize = 20 * 1024 * 1024; // 20MB
    if (file.size > maxSize && status !== "removed") {
      setShowPopupFileSize(true);
      remove();
      return;
    }

    // ÌååÏùº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    if (status === "done" || status === "preparing" || status === "uploading") {
      setUploadedFiles((prev) => {
        if (!prev.find((f) => f.name === file.name)) {
          setFileNames((prev) => [...prev, file.name]);
          return [...prev, file];
        }
        return prev;
      });
    } else if (status === "removed") {
      setUploadedFiles((prev) => prev.filter((f) => f.name !== file.name));
      setFileNames((prev) => prev.filter((name) => name !== file.name));
    }

    // ÌååÏùº ÌÅ¨Í∏∞Î•º KB ÎòêÎäî MB Îã®ÏúÑÎ°ú Î≥ÄÌôò
    const size = file.size;
    const sizeStr =
      size > 1024 * 1024
        ? `${(size / (1024 * 1024)).toFixed(1)}MB`
        : `${(size / 1024).toFixed(1)}KB`;

    // setTimeoutÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ DOMÏù¥ ÏóÖÎç∞Ïù¥Ìä∏Îêú ÌõÑ Ïã§Ìñâ
    setTimeout(() => {
      const containers = document.querySelectorAll(".dzu-previewContainer");
      containers.forEach((container) => {
        if (!container.dataset.filename) {
          container.dataset.filename = file.name;
          container.dataset.size = sizeStr;

          // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏù∏ Í≤ΩÏö∞ PDFÏ≤òÎüº ÌååÏùºÎ™Ö ÏöîÏÜå Ï∂îÍ∞Ä
          if (file.type.startsWith("image/")) {
            // Í∏∞Ï°¥ dzu-previewFileNameÏù¥ ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Ï∂îÍ∞Ä
            if (!container.querySelector(".dzu-previewFileName")) {
              const nameSpan = document.createElement("span");
              nameSpan.className = "dzu-previewFileName";
              nameSpan.textContent = `${file.name}, ${sizeStr}`;

              // Ïª®ÌÖåÏù¥ÎÑàÏùò Ï≤´ Î≤àÏß∏ ÏûêÏãùÏúºÎ°ú Ï∂îÍ∞Ä
              if (container.firstChild) {
                container.insertBefore(nameSpan, container.firstChild);
              } else {
                container.appendChild(nameSpan);
              }
            }
          }
        }
      });
    }, 0);
  };

  useDynamicViewport("width=1280"); // ÌäπÏ†ïÌéòÏù¥ÏßÄÏóêÏÑúÎßå pcÌôîÎ©¥Ï≤òÎüº Î≥¥Ïù¥Í∏∞

  // Ïä§ÌÅ¨Î°§ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // Îã§Ïùå Îã®Í≥ÑÎ°ú Ïù¥ÎèôÌïòÎäî Ìï®Ïàò
  const handleNextStep = (currentStep) => {
    setCompletedSteps([...completedSteps, currentStep]);
    setActiveTab(currentStep + 1);
    setShowPopupError(false);
  };

  // handleSkip Ìï®Ïàò ÏàòÏ†ï
  const handleSkip = async () => {
    if (activeTab === 2) {
      setCompletedSteps((prev) => [...prev, 2]);
      setIsSkipped(true);
      setActiveTab(3);
      setFileNames([]);
      setIsLoadingScenario(true);

      // API Ï†ÑÏÜ° Î∞è Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ï≤òÎ¶¨
      try {
        const datas = {
          project_name: projectName,
          product_description: projectDescription,
          business_model: business,
          industry_type: industry,
          target_country: country,
        };

        let response = await InterviewXProjectAnalysisRequest(
          datas,
          isLoggedIn
        );

        let RetryCount = 0;
        const MaxRetries = 10;

        while (
          RetryCount < MaxRetries &&
          (!response ||
            !response.response ||
            !response.response.project_analysis ||
            !response.response.project_analysis.business_analysis ||
            !response.response.project_analysis.target_customer)
        ) {
          response = await InterviewXProjectAnalysisRequest(datas, isLoggedIn);
          RetryCount++;
        }

        if (RetryCount >= MaxRetries) {
          setShowPopupError(true);
          return;
        }

        setProjectCreateInfo(response.response.project_analysis);

        setEditingText({
          business_analysis:
            response.response.project_analysis.business_analysis,
        });
        setEditingTargetText(
          response.response.project_analysis.target_customer
        );

        const projectTotalData = {
          projectTitle: response.project_name,
          projectDescription: response.product_description,
          businessModel: response.business_model,
          industryType: response.industry_type,
          targetCountry: response.target_country,
          projectAnalysis: response.response.project_analysis,
          thumbnail: getRandomThumbnail(),
          projectEducationState: projectEducationState,
          projectEducationCode: projectEducationCode,
        };
        setProjectTotalInfo(projectTotalData);
      } catch (error) {
      } finally {
        setIsLoadingScenario(false);
      }
    }
  };

  // ÏàòÏ†ïÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ Ï∂îÍ∞Ä
  const handleEditClick = () => {
    setEditingText(
      projectCreateInfo.business_analysis +
        (projectCreateInfo.file_analysis ? projectCreateInfo.file_analysis : "")
    );
    setIsEditing(!isEditing);
  };

  // ÌÉÄÍ≤ü Í≥†Í∞ùÍµ∞ ÏàòÏ†ïÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleEditTargetClick = () => {
    setIsEditingTarget(!isEditingTarget);
  };

  // ÌÉÄÍ≤ü textarea ÎÜíÏù¥ ÏûêÎèô Ï°∞Ï†à
  useEffect(() => {
    if (isEditingTarget && targetTextareaRef.current) {
      setTimeout(() => {
        targetTextareaRef.current.style.height = "auto";
        targetTextareaRef.current.style.height =
          targetTextareaRef.current.scrollHeight + "px";
      }, 0);
    }
  }, [editingTargetText, isEditingTarget]);

  const handleCreateProject = async () => {
    // ÌïÑÏàò ÌïÑÎìú Í≤ÄÏÇ¨
    if (
      !projectTotalInfo.projectTitle ||
      !projectTotalInfo.projectDescription ||
      !projectTotalInfo.businessModel ||
      !projectTotalInfo.industryType ||
      !projectTotalInfo.targetCountry ||
      !projectTotalInfo.projectAnalysis?.business_analysis ||
      !projectTotalInfo.projectAnalysis?.target_customer
      // Í±¥ÎÑàÎõ∞Í∏∞ ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå ÌååÏùº Í¥ÄÎ†® Í≤ÄÏ¶ù
      // (!isSkipped &&
      //   (!projectTotalInfo.files ||
      //     !projectTotalInfo.projectAnalysis?.file_analysis))
      //ÍµêÏú° Ïó¨Î∂Ä ÌôïÏù∏Ïö©
    ) {
      setShowPopupError2(true);
      return;
    }

    try {
      const newProjectId = await createProjectOnServerSaas(
        projectTotalInfo,
        //ÍµêÏú° Ïó¨Î∂Ä ÌôïÏù∏""
        isLoggedIn
      );
      setprojectId(newProjectId);
      navigate(`/Project`, { replace: true });
    } catch (error) {
      setShowPopupError(true);
      console.error("ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± Ïò§Î•ò:", error);
    }
  };

  const handleSaveClick = async () => {
    setIsEditing(false);

    setProjectCreateInfo({
      business_analysis: editingText,
      target_customer: editingTargetText,
    });

    setProjectTotalInfo({
      ...projectTotalInfo,
      projectAnalysis: {
        business_analysis: editingText,
        target_customer: editingTargetText,
      },
    });
  };

  const handleSaveTargetClick = async () => {
    setIsEditingTarget(false);

    if (editingText.file_analysis) {
      setProjectCreateInfo({
        business_analysis: editingText.business_analysis,
        target_customer: editingTargetText,
        file_analysis: editingText.file_analysis,
      });
      setProjectTotalInfo({
        ...projectTotalInfo,
        projectAnalysis: {
          business_analysis: editingText.business_analysis,
          target_customer: editingTargetText,
          file_analysis: editingText.file_analysis,
        },
      });
    } else {
      setProjectCreateInfo({
        business_analysis:
          typeof editingText === "object"
            ? editingText.business_analysis
            : editingText,
        target_customer: editingTargetText,
      });
      setProjectTotalInfo({
        ...projectTotalInfo,
        projectAnalysis: {
          business_analysis:
            typeof editingText === "object"
              ? editingText.business_analysis
              : editingText,
          target_customer: editingTargetText,
        },
      });
    }
  };

  const handleUndoClick = () => {
    setEditingText(
      projectCreateInfo.business_analysis +
        (projectCreateInfo.file_analysis ? projectCreateInfo.file_analysis : "")
    );
  };

  const handleUndoTargetClick = () => {
    setEditingTargetText(projectCreateInfo.target_customer);
  };

  useEffect(() => {
    // ÏÉàÎ°úÍ≥†Ïπ® Í∞êÏßÄ Ìï®Ïàò
    const detectRefresh = () => {
      // ÌòÑÏû¨ URL ÌôïÏù∏
      const currentUrl = window.location.href;
      if (currentUrl.toLowerCase().includes("projectcreate")) {
        // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÎßàÏßÄÎßâ URL Í∞ÄÏ†∏Ïò§Í∏∞
        const lastUrl = sessionStorage.getItem("lastUrl");

        // ÎßàÏßÄÎßâ URLÏù¥ ÌòÑÏû¨ URLÍ≥º Í∞ôÏúºÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
        if (lastUrl && lastUrl === currentUrl) {
          navigate("/Project");
          return true;
        }

        // ÌòÑÏû¨ URL Ï†ÄÏû•
        sessionStorage.setItem("lastUrl", currentUrl);
      }

      return false;
    };

    // beforeunload Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleBeforeUnload = (event) => {
      // Ïù¥Î≤§Ìä∏ Ï∑®ÏÜå (ÌëúÏ§ÄÏóê Îî∞Îùº)
      event.preventDefault();
      // ChromeÏùÄ returnValue ÏÑ§Ï†ï ÌïÑÏöî
      event.returnValue = "";

      // ÏÉàÎ°úÍ≥†Ïπ® Ïãú Î£®Ìä∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      navigate("/Project");
    };

    // F5 ÌÇ§ ÎòêÎäî Ctrl+R Í∞êÏßÄ
    const handleKeyDown = (event) => {
      if (
        (event.key === "r" && (event.metaKey || event.ctrlKey)) ||
        event.key === "F5"
      ) {
        // F5 ÌÇ§ ÏΩîÎìú
        event.preventDefault();
        navigate("/Project");
      }
    };

    // Ìï®Ïàò Ïã§Ìñâ
    detectRefresh();

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    window.addEventListener("keydown", handleKeyDown);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [navigate]);

  return (
    <>
      <DropzoneStyles />

      <ContentsWrap>
        <MoleculeHeader />

        <MainContent>
          <ProjectCreateWrap>
            <BackButton onClick={() => navigate("/Project")}>
              <images.ChevronRight width="20px" height="20px" />
              <Sub3 color="gray500">Îí§Î°ú</Sub3>
            </BackButton>

            <TabWrapType5>
              <TabButtonType5
                Num3
                isActive={activeTab >= 1}
                onClick={() => {
                  setActiveTab(1);
                  setFileNames([]); // ÌååÏùº Î™©Î°ù Ï¥àÍ∏∞Ìôî
                }}
                disabled={isLoadingScenario}
              >
                <span>01</span>
                <div className="text">
                  <Body1 color={activeTab >= 1 ? "gray700" : "gray300"}>
                    ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ ÏûÖÎ†•
                  </Body1>
                </div>
              </TabButtonType5>
              <TabButtonType5
                Num3
                isActive={activeTab >= 2}
                onClick={() => completedSteps.includes(2) && setActiveTab(2)}
                disabled={isLoadingScenario}
              >
                <span>02</span>
                <div className="text">
                  <Body1 color={activeTab >= 2 ? "gray700" : "gray300"}>
                    Îç∞Ïù¥ÌÑ∞ Îì±Î°ù
                  </Body1>
                </div>
              </TabButtonType5>
              <TabButtonType5
                Num3
                isActive={activeTab >= 3}
                onClick={() => completedSteps.includes(2) && setActiveTab(3)}
                disabled={!completedSteps.includes(2)}
              >
                <span>03</span>
                <div className="text">
                  <Body1 color={activeTab >= 3 ? "gray700" : "gray300"}>
                    ÌîÑÎ°úÏ†ùÌä∏ Î∂ÑÏÑù ÌôïÏù∏
                  </Body1>
                </div>
              </TabButtonType5>
            </TabWrapType5>

            {activeTab === 1 && (
              <TabContent5>
                {isLoading ? (
                  <div
                    style={{
                      width: "100%",
                      display: "flex",
                      justifyContent: "center",
                      minHeight: "200px",
                      alignItems: "center",
                    }}
                  >
                    <AtomPersonaLoader message="Ïû†Ïû¨ Í≥†Í∞ùÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏñ¥Ïöî..." />
                  </div>
                ) : (
                  <>
                    <div className="content">
                      <H2 color="gray800" align="left">
                        ÏÉà ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî
                      </H2>
                      <TabContent5Item required>
                        <div className="title">
                          <Body1 color="gray700">
                            ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî
                          </Body1>
                        </div>
                        <CustomInput
                          type="text"
                          placeholder="ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ"
                          value={projectName}
                          onChange={(e) =>
                            handleInputChange("projectName", e.target.value)
                          }
                          disabled={completedSteps.includes(2)}
                        />
                      </TabContent5Item>

                      <TabContent5Item required>
                        <div className="title">
                          <Body1 color="gray700">Ï†úÌíà / ÏÑúÎπÑÏä§ ÏÑ§Î™Ö</Body1>
                        </div>
                        <FormBox Large>
                          <CustomTextarea
                            Edit
                            rows={3}
                            placeholder="Ï†úÌíà / ÏÑúÎπÑÏä§Ïùò Ï£ºÏöî ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                            maxLength={150}
                            status="valid"
                            value={projectDescription}
                            onChange={(e) => {
                              handleInputChange(
                                "projectDescription",
                                e.target.value
                              );
                              setDescriptionLength(e.target.value.length);
                            }}
                            disabled={completedSteps.includes(2)}
                          />
                          <Body2 color="gray300" align="right">
                            {descriptionLength} / 150
                          </Body2>
                        </FormBox>
                      </TabContent5Item>

                      <TabContent5Item>
                        <div className="title">
                          <Body1 color="gray700">ÏÇ¨ÏóÖ Î™®Îç∏</Body1>
                        </div>

                        <SelectBox ref={businessRef}>
                          <SelectBoxTitle
                            onClick={(e) => toggleSelectBox("business", e)}
                          >
                            <Body2
                              color={
                                selectedValues.business ? "gray800" : "gray300"
                              }
                              style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                              }}
                            >
                              {selectedValues.business && (
                                <images.ProjectTag
                                  color={
                                    selectedValues.business === "B2C"
                                      ? "#AF52DE"
                                      : selectedValues.business === "B2B"
                                      ? "#5856D6"
                                      : selectedValues.business === "B2G"
                                      ? "#007AFF"
                                      : selectedValues.business === "B2B2C"
                                      ? "#32ADE6"
                                      : selectedValues.business === "B2B2B"
                                      ? "#30B0C7"
                                      : "#AF52DE"
                                  }
                                />
                              )}
                              {selectedValues.business || "ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"}
                            </Body2>
                            <images.ChevronDown
                              width="24px"
                              height="24px"
                              color={palette.gray500}
                              style={{
                                transform: selectBoxStates.business
                                  ? "rotate(180deg)"
                                  : "rotate(0deg)",
                                transition: "transform 0.3s ease",
                              }}
                            />
                          </SelectBoxTitle>

                          {selectBoxStates.business && (
                            <SelectBoxList dropUp={dropUpStates.business}>
                              <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("B2C", "business")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <images.ProjectTag color="#AF52DE" />
                                  B2C
                                </Body2>
                              </SelectBoxItem>
                              <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("B2B", "business")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <images.ProjectTag color="#5856D6" />
                                  B2B
                                </Body2>
                              </SelectBoxItem>
                              <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("B2G", "business")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <images.ProjectTag color="#007AFF" />
                                  B2G
                                </Body2>
                              </SelectBoxItem>
                              <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("B2B2C", "business")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <images.ProjectTag color="#32ADE6" />
                                  B2B2C
                                </Body2>
                              </SelectBoxItem>
                              <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("B2B2B", "business")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <images.ProjectTag color="#30B0C7" />
                                  B2B2B
                                </Body2>
                              </SelectBoxItem>
                            </SelectBoxList>
                          )}
                        </SelectBox>
                      </TabContent5Item>

                      <TabContent5Item>
                        <div className="title">
                          <Body1 color="gray700">ÏóÖÏ¢Ö ÏÑ†ÌÉù</Body1>
                        </div>

                        <SelectBox ref={industryRef}>
                          <SelectBoxTitle
                            onClick={(e) => toggleSelectBox("industry", e)}
                          >
                            <Body2
                              color={
                                selectedValues.industry ? "gray800" : "gray300"
                              }
                              style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                                flexWrap: "nowrap",
                              }}
                            >
                              {selectedValues.industry && (
                                <img
                                  src={
                                    selectedValues.industry ===
                                    "Ï†ïÎ≥¥ÌÜµÏã† Î∞è Í∏∞Ïà†"
                                      ? images.ProjectInformation
                                      : selectedValues.industry ===
                                        "Í∏àÏúµ Î∞è Î≤ïÎ•†"
                                      ? images.ProjectBanking
                                      : selectedValues.industry ===
                                        "Ï†úÏ°∞ Î∞è ÏÉùÏÇ∞"
                                      ? images.ProjectProduction
                                      : selectedValues.industry ===
                                        "Í±¥ÏÑ§ Î∞è Ïù∏ÌîÑÎùº"
                                      ? images.ProjectBuild
                                      : selectedValues.industry ===
                                        "ÏùòÎ£å Î∞è Ìó¨Ïä§ÏºÄÏñ¥"
                                      ? images.ProjectMedical
                                      : selectedValues.industry ===
                                        "ÍµêÏú° Î∞è Í≥µÍ≥µ ÏÑúÎπÑÏä§"
                                      ? images.ProjectEducation
                                      : selectedValues.industry ===
                                        "ÏÜåÎπÑÏû¨ Î∞è ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº"
                                      ? images.ProjectConsumer
                                      : images.ProjectEtc
                                  }
                                  alt=""
                                />
                              )}
                              {selectedValues.industry || "ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"}
                            </Body2>
                            <images.ChevronDown
                              width="24px"
                              height="24px"
                              color={palette.gray500}
                              style={{
                                transform: selectBoxStates.industry
                                  ? "rotate(180deg)"
                                  : "rotate(0deg)",
                                transition: "transform 0.3s ease",
                              }}
                            />
                          </SelectBoxTitle>

                          {selectBoxStates.industry && (
                            <SelectBoxList dropUp={dropUpStates.industry}>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "Ï†ïÎ≥¥ÌÜµÏã† Î∞è Í∏∞Ïà†",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectInformation} alt="" />
                                  Ï†ïÎ≥¥ÌÜµÏã† Î∞è Í∏∞Ïà†
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "Í∏àÏúµ Î∞è Î≤ïÎ•†",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectBanking} alt="" />
                                  Í∏àÏúµ Î∞è Î≤ïÎ•†
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "Ï†úÏ°∞ Î∞è ÏÉùÏÇ∞",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectProduction} alt="" />
                                  Ï†úÏ°∞ Î∞è ÏÉùÏÇ∞
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "Í±¥ÏÑ§ Î∞è Ïù∏ÌîÑÎùº",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectBuild} alt="" />
                                  Í±¥ÏÑ§ Î∞è Ïù∏ÌîÑÎùº
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "ÏùòÎ£å Î∞è Ìó¨Ïä§ÏºÄÏñ¥",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectMedical} alt="" />
                                  ÏùòÎ£å Î∞è Ìó¨Ïä§ÏºÄÏñ¥
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "ÍµêÏú° Î∞è Í≥µÍ≥µ ÏÑúÎπÑÏä§",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectEducation} alt="" />
                                  ÍµêÏú° Î∞è Í≥µÍ≥µ ÏÑúÎπÑÏä§
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect(
                                    "ÏÜåÎπÑÏû¨ Î∞è ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº",
                                    "industry"
                                  )
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectConsumer} alt="" />
                                  ÏÜåÎπÑÏû¨ Î∞è ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect("Í∏∞ÌÉÄ", "industry")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectEtc} alt="" />
                                  Í∏∞ÌÉÄ
                                </Body2>
                              </SelectBoxItem2>
                            </SelectBoxList>
                          )}
                        </SelectBox>
                      </TabContent5Item>

                      <TabContent5Item>
                        <div className="title">
                          <Body1 color="gray700">ÌÉÄÍ≤ü Íµ≠Í∞Ä</Body1>
                        </div>

                        <SelectBox ref={countryRef}>
                          <SelectBoxTitle
                            onClick={(e) => toggleSelectBox("country", e)}
                          >
                            <Body2
                              color={
                                selectedValues.country ? "gray800" : "gray300"
                              }
                              style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "4px",
                              }}
                            >
                              {selectedValues.country && (
                                <img
                                  src={
                                    selectedValues.country === "ÎåÄÌïúÎØºÍµ≠"
                                      ? images.ProjectKorea
                                      : selectedValues.country === "ÎØ∏Íµ≠"
                                      ? images.ProjectUsa
                                      : // : selectedValues.country === "Ï§ëÍµ≠"
                                      selectedValues.country === "ÏùºÎ≥∏"
                                      ? images.ProjectJapan
                                      : selectedValues.country === "ÎåÄÎßå"
                                      ? images.ProjectTaiwan
                                      : images.ProjectKorea
                                  }
                                  alt=""
                                />
                              )}
                              {selectedValues.country || "ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"}
                            </Body2>
                            <images.ChevronDown
                              width="24px"
                              height="24px"
                              color={palette.gray500}
                              style={{
                                transform: selectBoxStates.country
                                  ? "rotate(180deg)"
                                  : "rotate(0deg)",
                                transition: "transform 0.3s ease",
                              }}
                            />
                          </SelectBoxTitle>

                          {selectBoxStates.country && (
                            <SelectBoxList dropUp={dropUpStates.country}>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect("ÎåÄÌïúÎØºÍµ≠", "country")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectKorea} alt="" />
                                  ÎåÄÌïúÎØºÍµ≠
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect("ÎØ∏Íµ≠", "country")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectUsa} alt="" />
                                  ÎØ∏Íµ≠
                                </Body2>
                              </SelectBoxItem2>
                              {/* <SelectBoxItem
                                onClick={() =>
                                  handlePurposeSelect("Ï§ëÍµ≠", "country")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectChina} alt="" />
                                  Ï§ëÍµ≠
                                </Body2>
                              </SelectBoxItem> */}
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect("ÏùºÎ≥∏", "country")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectJapan} alt="" />
                                  ÏùºÎ≥∏
                                </Body2>
                              </SelectBoxItem2>
                              <SelectBoxItem2
                                onClick={() =>
                                  handlePurposeSelect("ÎåÄÎßå", "country")
                                }
                              >
                                <Body2 color="gray700" align="left">
                                  <img src={images.ProjectTaiwan} alt="" />
                                  ÎåÄÎßå
                                </Body2>
                              </SelectBoxItem2>
                            </SelectBoxList>
                          )}
                        </SelectBox>
                      </TabContent5Item>
                    </div>

                    <Button
                      DbExLarge
                      Primary
                      Fill
                      style={{ minWidth: "190px" }}
                      onClick={handleSubmitBusinessInfo}
                      disabled={
                        !isRequiredFieldsFilled() || completedSteps.includes(2)
                      }
                    >
                      Îã§Ïùå
                    </Button>
                  </>
                )}
              </TabContent5>
            )}

            {activeTab === 2 && (
              <TabContent5>
                <>
                  <div className="content">
                    <H2 color="gray800" align="left">
                      Ï†ïÌôïÌïú ÌîÑÎ°úÏ†ùÌä∏ Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Í¥ÄÎ†® Î¨∏ÏÑú, Îç∞Ïù¥ÌÑ∞, Î≥¥Í≥†ÏÑú Îì±ÏùÑ
                      ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.
                    </H2>

                    <TabContent5Item required>
                      <div className="title">
                        <Body1 color="gray700">ÌååÏùº ÏóÖÎ°úÎìú (20MB)</Body1>
                      </div>
                      <Dropzone
                        onChangeStatus={handleChangeStatus}
                        maxFiles={5}
                        multiple={true}
                        canRemove={true}
                        canRestart={false}
                        disabled={completedSteps.includes(2)}
                        accept="image/jpg, image/jpeg, image/png, image/gif, image/bmp, application/pdf"
                        maxSizeBytes={20 * 1024 * 1024}
                        inputWithFilesContent={
                          <>
                            <img src={images.ImagePrimary} alt="" />
                            {fileNames.length === 0 && (
                              <div
                                style={{
                                  display: "flex",
                                  flexDirection: "column",
                                  alignItems: "center",
                                  gap: "12px",
                                }}
                              >
                                <div>
                                  <Body2 color="gray800">
                                    ÏóÖÎ°úÎìúÌïòÎ†§Îäî ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÏó¨ ÎÜìÏïÑÏ£ºÏÑ∏Ïöî
                                  </Body2>
                                  <Sub3 color="gray500">
                                    jpg, png, PDF ÌååÏùºÎßå ÏóÖÎ°úÎìúÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§
                                    (20MB Ïù¥Ìïò)
                                  </Sub3>
                                </div>
                                <div className="browse-button">
                                  ÌååÏùº Ï∞æÏïÑÎ≥¥Í∏∞
                                </div>
                              </div>
                            )}
                            {fileNames.length > 0 && (
                              <div>
                                {fileNames.map((name, index) => (
                                  <Body2 key={index} color="gray700">
                                    {name}
                                  </Body2>
                                ))}
                              </div>
                            )}
                          </>
                        }
                        inputContent={
                          <>
                            <img src={images.ImagePrimary} alt="" />
                            {fileNames.length === 0 && (
                              <div
                                style={{
                                  display: "flex",
                                  flexDirection: "column",
                                  alignItems: "center",
                                  gap: "12px",
                                }}
                              >
                                <div>
                                  <Body2 color="gray800">
                                    ÏóÖÎ°úÎìúÌïòÎ†§Îäî ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÏó¨ ÎÜìÏïÑÏ£ºÏÑ∏Ïöî
                                  </Body2>
                                  <Sub3 color="gray500">
                                    jpg, png, PDF ÌååÏùºÎßå ÏóÖÎ°úÎìúÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§
                                    (20MB Ïù¥Ìïò)
                                  </Sub3>
                                </div>
                                <div className="browse-button">
                                  ÌååÏùº Ï∞æÏïÑÎ≥¥Í∏∞
                                </div>
                              </div>
                            )}
                            {fileNames.length > 0 && (
                              <div>
                                {fileNames.map((name, index) => (
                                  <Body2 key={index} color="gray700">
                                    {name}
                                  </Body2>
                                ))}
                              </div>
                            )}
                          </>
                        }
                        styles={StyledDropzone}
                      />
                    </TabContent5Item>
                  </div>

                  <ButtonWrap>
                    <Body1
                      color="gray500"
                      onClick={!completedSteps.includes(2) ? handleSkip : null}
                      // disabled={completedSteps.length >= 2}
                    >
                      Í±¥ÎÑàÎõ∞Í∏∞
                    </Body1>

                    <Button
                      DbExLarge
                      Primary
                      Fill
                      style={{ minWidth: "190px" }}
                      onClick={handleSubmitBusinessInfo}
                      disabled={
                        !isRequiredFieldsFilled() || completedSteps.includes(2)
                      }
                    >
                      Îã§Ïùå
                    </Button>
                  </ButtonWrap>
                </>
              </TabContent5>
            )}

            {activeTab === 3 && completedSteps.includes(2) && (
              <TabContent5 Small>
                {isLoadingScenario ? (
                  <div
                    style={{
                      width: "100%",
                      display: "flex",
                      justifyContent: "center",
                      minHeight: "200px",
                      alignItems: "center",
                    }}
                  >
                    <AtomPersonaLoader message="ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏöîÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§." />
                  </div>
                ) : (
                  <>
                    <div className="content">
                      <H2 color="gray800" align="left">
                        ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Î•º Î∂ÑÏÑùÌïòÏó¨ ÌîÑÎ°úÏ†ùÌä∏ Ï£ºÏöî ÎÇ¥Ïö©ÏùÑ
                        Ï†ïÎ¶¨ÌñàÏäµÎãàÎã§.
                      </H2>

                      <SummaryWrap>
                        <Body1 color="gray700" align="left">
                          ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥
                        </Body1>
                        <ListBoxGroup Small>
                          <li>
                            <Body2 color="gray500">ÏÇ¨ÏóÖÎ™®Îç∏</Body2>
                            <Body2 color="gray800">
                              {selectedValues.business || "-"}
                            </Body2>
                          </li>
                          <li>
                            <Body2 color="gray500">ÏóÖÏ¢Ö</Body2>
                            <Body2 color="gray800">
                              {selectedValues.industry || "-"}
                            </Body2>
                          </li>
                          <li>
                            <Body2 color="gray500">ÌÉÄÍ≤ü Íµ≠Í∞Ä</Body2>
                            <Body2 color="gray800">
                              {selectedValues.country || "-"}
                            </Body2>
                          </li>
                          <li>
                            <Body2 color="gray500">ÏóÖÎ°úÎìú ÌååÏùº</Body2>
                            {/* <Body2 color="gray800">
                              {uploadedFiles.length === 0
                                ? "-"
                                : uploadedFiles.map((file) => (
                                    <div key={file.id}>{file.name}</div>
                                  ))}
                            </Body2> */}
                            <Body2 color="gray800">
                              {isSkipped
                                ? "-"
                                : uploadedFiles.length === 0
                                ? "-"
                                : uploadedFiles.map((file) => (
                                    <div key={file.id}>{file.name}</div>
                                  ))}
                            </Body2>
                          </li>
                        </ListBoxGroup>
                      </SummaryWrap>

                      <SummaryWrap>
                        <Title>
                          <Body1 color="gray700" align="left">
                            ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏöî
                          </Body1>
                          {!isEditing ? (
                            <IconButton onClick={handleEditClick}>
                              <img src={images.PencilSquare} alt="" />
                              <span>ÏàòÏ†ïÌïòÍ∏∞</span>
                            </IconButton>
                          ) : (
                            <IconButton onClick={handleSaveClick}>
                              <img src={images.FolderArrowDown} alt="" />
                              <span>Ï†ÄÏû•ÌïòÍ∏∞</span>
                            </IconButton>
                          )}
                        </Title>
                        {!isEditing && (
                          <ListBoxGroup>
                            <Body2 color="gray800" align="left">
                              {typeof editingText === "object" ? (
                                <>
                                  {editingText.business_analysis}
                                  {editingText.file_analysis && (
                                    <>
                                      <br />
                                      <br />
                                      {editingText.file_analysis}
                                    </>
                                  )}
                                </>
                              ) : (
                                editingText
                              )}
                            </Body2>
                          </ListBoxGroup>
                        )}

                        {isEditing && (
                          <FormBox>
                            <CustomTextarea
                              Edit
                              ref={textareaRef}
                              style={{
                                height: "auto",
                                overflow: "hidden",
                                resize: "none",
                              }}
                              value={editingText}
                              onChange={(e) => {
                                setEditingText(e.target.value);
                                adjustTextareaHeight();
                              }}
                            />
                            <EditButtonGroup>
                              <IconButton onClick={handleUndoClick}>
                                <img
                                  src={images.ClockCounterclockwise}
                                  alt=""
                                />
                                <span>Ïù¥Ï†ÑÏúºÎ°ú ÎêòÎèåÎ¶¨Í∏∞</span>
                              </IconButton>
                              {/* <IconButton>
                                <img src={images.MagicStick} alt="" />
                                <span>AIÎ°ú Îã§Îì¨Í∏∞</span>
                              </IconButton> */}
                            </EditButtonGroup>
                          </FormBox>
                        )}
                      </SummaryWrap>

                      <SummaryWrap>
                        <Title>
                          <Body1 color="gray700" align="left">
                            Ï£ºÏöî ÌÉÄÍ≤ü Í≥†Í∞ùÍµ∞
                          </Body1>
                          {!isEditingTarget ? (
                            <IconButton onClick={handleEditTargetClick}>
                              <img src={images.PencilSquare} alt="" />
                              <span>ÏàòÏ†ïÌïòÍ∏∞</span>
                            </IconButton>
                          ) : (
                            <IconButton onClick={handleSaveTargetClick}>
                              <img src={images.FolderArrowDown} alt="" />
                              <span>Ï†ÄÏû•ÌïòÍ∏∞</span>
                            </IconButton>
                          )}
                        </Title>
                        {!isEditingTarget && (
                          <ListBoxGroup>
                            <Body2 color="gray800" align="left">
                              {editingTargetText}
                            </Body2>
                          </ListBoxGroup>
                        )}

                        {isEditingTarget && (
                          <FormBox>
                            <CustomTextarea
                              Edit
                              ref={targetTextareaRef}
                              style={{
                                height: "auto",
                                overflow: "hidden",
                                resize: "none",
                              }}
                              value={editingTargetText}
                              onChange={(e) => {
                                setEditingTargetText(e.target.value);
                              }}
                            />
                            <EditButtonGroup>
                              <IconButton onClick={handleUndoTargetClick}>
                                <img
                                  src={images.ClockCounterclockwise}
                                  alt=""
                                />
                                <span>Ïù¥Ï†ÑÏúºÎ°ú ÎêòÎèåÎ¶¨Í∏∞</span>
                              </IconButton>
                              {/* <IconButton>
                                <img src={images.MagicStick} alt="" />
                                <span>AIÎ°ú Îã§Îì¨Í∏∞</span>
                              </IconButton> */}
                            </EditButtonGroup>
                          </FormBox>
                        )}
                      </SummaryWrap>
                    </div>

                    <Button
                      DbExLarge
                      Primary
                      Fill
                      style={{ minWidth: "190px" }}
                      onClick={handleCreateProject}
                    >
                      ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÌïòÍ∏∞
                    </Button>
                  </>
                )}
              </TabContent5>
            )}
          </ProjectCreateWrap>
        </MainContent>
      </ContentsWrap>

      {showPopupError && (
        <PopupWrap
          Warning
          title="Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."
          message="ÌòÑÏû¨ ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Îäî ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
          buttonType="Outline"
          confirmText="ÌôïÏù∏"
          isModal={false}
          onConfirm={() => setShowPopupError(false)}
        />
      )}

      {showPopupError2 && (
        <PopupWrap
          Warning
          title="Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."
          message="ÌòÑÏû¨ ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Îäî ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
          buttonType="Outline"
          confirmText="ÌôïÏù∏"
          isModal={false}
          onConfirm={() => {
            setShowPopupError2(false);
            navigate("/Project", { replace: true });
          }}
        />
      )}

      {showPopupSave && (
        <PopupWrap
          Check
          title="Î¶¨Ìè¨Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."
          message="Ï†ÄÏû•Îêú Î¶¨Ìè¨Ìä∏Îäî 'Î≥¥Í¥ÄÌï®'ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî"
          buttonType="Outline"
          closeText="Î≥¥Í¥ÄÌï® Î∞îÎ°úÍ∞ÄÍ∏∞"
          confirmText="Î¶¨Ìè¨Ìä∏ Í≥ÑÏÜç ÌôïÏù∏"
          isModal={false}
          onCancel={() => setShowPopupSave(false)}
          onConfirm={() => setShowPopupSave(false)}
        />
      )}
    </>
  );
};

export default PageProjectCreate;

const BackButton = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 12px;
  cursor: pointer;

  svg {
    transform: rotate(180deg);
  }
`;

const ProjectCreateWrap = styled.div`
  display: flex;
  flex-direction: column;
  gap: 80px;
  margin-top: 60px;
`;

const SummaryWrap = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;

  .title {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
`;

const ButtonWrap = styled.div`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;

  > div {
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    cursor: pointer;
  }
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 12px;
`;

const EditButtonGroup = styled(ButtonGroup)`
  justify-content: end;
`;

const ViewInfo = styled.div`
  display: flex;
  align-items: center;
  justify-content: $space-between;
  gap: 4px;
  width: 100%;
  font-size: 0.875rem;
  color: ${palette.gray800};

  + div {
    padding-top: 16px;
    border-top: 1px solid ${palette.outlineGray};
  }

  .title {
    display: flex;
    align-items: flex-end;
    justify-content: flex-start;
    gap: 8px;
    font-size: 0.875rem;
    color: ${palette.black};

    span {
      font-size: 0.75rem;
      font-weight: 300;
      color: ${palette.gray500};
    }
  }

  .info {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 32px;

    div {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      gap: 7px;
      font-size: 0.875rem;
      font-weight: 300;
      color: ${palette.gray500};
      line-height: 1.5;

      + div:before {
        position: absolute;
        top: 50%;
        left: -16px;
        transform: translateY(-50%);
        width: 1px;
        height: 12px;
        background-color: ${palette.outlineGray};
        content: "";
      }
    }
  }

  .button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;

    button {
      font-family: "Pretendard", poppins;
      font-size: 0.75rem;
      font-weight: 300;
      padding: 6px 10px;
      border-radius: 6px;

      &.view {
        color: ${palette.black};
        border: 1px solid ${palette.outlineGray};
        background: ${palette.chatGray};
      }

      &.analysis {
        color: ${palette.primary};
        border: 1px solid ${palette.primary};
        background: #e9f1ff;
      }
    }
  }
`;
